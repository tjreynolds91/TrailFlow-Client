[{"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\reportWebVitals.js":"1","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\index.jsx":"2","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\userLists\\UserListMenu.jsx":"3","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\userLists\\CreateListModal.jsx":"4","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\NavbarComponent.jsx":"5","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\Footer.jsx":"6","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\Layout.jsx":"7","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\Register.jsx":"8","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\userLists\\ListModals.jsx":"9","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\userLists\\DisplayListModal.jsx":"10","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\LoginModal.jsx":"11","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\Login.jsx":"12","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\App.jsx":"13","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\TrailCard.jsx":"14","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\TrailAdderModal.jsx":"15","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\helpers\\environment.js":"16"},{"size":362,"mtime":499162500000,"results":"17","hashOfConfig":"18"},{"size":547,"mtime":1607357300298,"results":"19","hashOfConfig":"18"},{"size":913,"mtime":1607099136731,"results":"20","hashOfConfig":"18"},{"size":4419,"mtime":1607360717864,"results":"21","hashOfConfig":"18"},{"size":1907,"mtime":1606959175498,"results":"22","hashOfConfig":"18"},{"size":521,"mtime":1607136416903,"results":"23","hashOfConfig":"18"},{"size":13152,"mtime":1607358101389,"results":"24","hashOfConfig":"18"},{"size":10116,"mtime":1607030940505,"results":"25","hashOfConfig":"18"},{"size":4285,"mtime":1607122598839,"results":"26","hashOfConfig":"18"},{"size":12583,"mtime":1607366479763,"results":"27","hashOfConfig":"18"},{"size":3227,"mtime":1607009954702,"results":"28","hashOfConfig":"18"},{"size":5236,"mtime":1607009705268,"results":"29","hashOfConfig":"18"},{"size":1701,"mtime":1607367026123,"results":"30","hashOfConfig":"18"},{"size":3358,"mtime":1607092201397,"results":"31","hashOfConfig":"18"},{"size":9632,"mtime":1607119543053,"results":"32","hashOfConfig":"18"},{"size":476,"mtime":1607347911368,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1nfdh0n",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"39"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"39"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\reportWebVitals.js",[],["80","81"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\index.jsx",[],["82","83"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\userLists\\UserListMenu.jsx",["84","85","86","87"],"import React, { useState, useEffect } from \"react\";\r\nimport { Button } from \"reactstrap\";\r\n// import { BrowserRouter as Router } from \"react-router-dom\";\r\nimport ListModals from \"./ListModals\";\r\n// import APIURL from \"../../helpers/environment\";\r\n\r\n// App component\r\n\r\nexport default class UserList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return this.props.token ? (\r\n      <div className=\"\">\r\n        <>\r\n          <ListModals token={this.props.token} />\r\n        </>\r\n      </div>\r\n    ) : (\r\n      <div>Login to create and view TrailLists!</div>\r\n    );\r\n  }\r\n}\r\n\r\n// function UserList(props) {\r\n//   return props.token ? (\r\n//     <div className=\"\">\r\n//       <>\r\n//         <ListModals token={props.token} />\r\n//       </>\r\n//     </div>\r\n//   ) : (\r\n//     <div>Login to create and view TrailLists!</div>\r\n//   );\r\n// }\r\n\r\n// export default UserList;\r\n","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\userLists\\CreateListModal.jsx",["88","89"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\NavbarComponent.jsx",["90"],"import React, { useState } from \"react\";\r\nimport LoginModal from \"./LoginModal\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  Button,\r\n} from \"reactstrap\";\r\n\r\nexport default class NavbarComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n\r\n    this.state = {\r\n      isOpen: false,\r\n    };\r\n  }\r\n  toggle() {\r\n    this.setState({ isOpen: !this.isOpen });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Navbar light expand=\"md\" className=\"nav-fill w-100 navbar\">\r\n        <NavbarBrand href=\"/\" className=\"ml-auto\" style={{ zIndex: \"2\" }}>\r\n          TrailFlow\r\n        </NavbarBrand>\r\n        <NavbarToggler onClick={this.toggle} />\r\n        <Collapse isOpen={this.state.isOpen} navbar>\r\n          <Nav className=\"ml-auto\" navbar>\r\n            {this.props.token ? (\r\n              <Button onClick={this.props.clearToken}>Logout</Button>\r\n            ) : (\r\n              <LoginModal updateToken={this.props.updateToken} />\r\n            )}\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\n// const NavbarComponent = (props) => {\r\n//   const [isOpen, setIsOpen] = useState(false);\r\n\r\n//   const toggle = () => setIsOpen(!isOpen);\r\n//   return (\r\n//     <Navbar light expand=\"md\" className=\"nav-fill w-100 navbar\">\r\n//       <NavbarBrand href=\"/\" className=\"ml-auto\" style={{ zIndex: \"2\" }}>\r\n//         TrailFlow\r\n//       </NavbarBrand>\r\n//       <NavbarToggler onClick={toggle} />\r\n//       <Collapse isOpen={isOpen} navbar>\r\n//         <Nav className=\"ml-auto\" navbar>\r\n//           {props.token ? (\r\n//             <Button onClick={props.clearToken}>Logout</Button>\r\n//           ) : (\r\n//             <LoginModal updateToken={props.updateToken} />\r\n//           )}\r\n//         </Nav>\r\n//       </Collapse>\r\n//     </Navbar>\r\n//   );\r\n// };\r\n\r\n// export default NavbarComponent;\r\n","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\Footer.jsx",["91"],"import React from \"react\";\r\nimport { Row } from \"reactstrap\";\r\n\r\nexport default class FooterComponent extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Row className=\"footer\">\r\n        &copy;{new Date().getFullYear()} Timothy Reynolds\r\n      </Row>\r\n    );\r\n  }\r\n}\r\n\r\n// const FooterComponent = (props) => {\r\n//   return (\r\n//     <Row className=\"footer\">&copy;{new Date().getFullYear()} TrailFlow</Row>\r\n//   );\r\n// };\r\n\r\n// export default FooterComponent;\r\n",["92","93"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\Layout.jsx",["94","95"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\Register.jsx",["96"],"import React, { useState } from \"react\";\r\nimport APIURL from \"../helpers/environment\";\r\nimport {\r\n  Button,\r\n  Container,\r\n  Label,\r\n  Input,\r\n  Form,\r\n  UncontrolledAlert,\r\n} from \"reactstrap\";\r\n\r\nexport default class Register extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.submitRegister = this.submitRegister.bind(this);\r\n    this.formValidate = this.formValidate.bind(this);\r\n\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      emailErr: \"\",\r\n      passwordErr: \"\",\r\n      responseMessage: \"\",\r\n    };\r\n  }\r\n\r\n  submitRegister(event) {\r\n    event.preventDefault();\r\n    const isValid = this.formValidate();\r\n    console.log(isValid);\r\n    if (isValid) {\r\n      if (this.state.password === this.state.password2) {\r\n        fetch(`${APIURL}/user/register`, {\r\n          //!needs to be updated to heroku for \"production\"\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            email: this.state.email,\r\n            password: this.state.password,\r\n          }),\r\n        })\r\n          .then((res) => {\r\n            if (res.ok) {\r\n              return res.json();\r\n            } else {\r\n              if (res.status === 409) {\r\n                this.setState({ responseMessage: \"Account Already Exists\" });\r\n                throw new Error(\"Account Already Exist\");\r\n              } else {\r\n                this.setState({ responseMessage: \"Something went wrong\" });\r\n                throw new Error(\"Something went wrong\");\r\n              }\r\n            }\r\n          })\r\n          .then((data) => {\r\n            this.props.updateToken(data.token);\r\n            console.log(data.message);\r\n            this.setState({ responseMessage: data.message });\r\n          })\r\n          .catch((err) => {\r\n            alert(err);\r\n          });\r\n      } else {\r\n        alert(\"Password must match: Please reenter credentials\");\r\n      }\r\n    } else {\r\n      return;\r\n    }\r\n  }\r\n\r\n  formValidate(event) {\r\n    const passwordErr = {};\r\n    const emailErr = {};\r\n    let isValid = true;\r\n\r\n    // checks password length and returns error if <5\r\n    if (this.state.password.trim().length < 5) {\r\n      passwordErr.TooShort = \"Password must contain 5 or more characters.\";\r\n      isValid = false;\r\n    }\r\n\r\n    // check email is formatted\r\n    if (!this.state.email.includes(\"@\") || !this.state.email.includes(\".\")) {\r\n      emailErr.invalidFormat =\r\n        \"Invalid email. Email must be formatted as test@test.com\";\r\n      isValid = false;\r\n    }\r\n\r\n    this.setState({ passwordErr: passwordErr });\r\n    this.setState({ emailErr: emailErr });\r\n    return isValid;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Form onSubmit={this.submitRegister} className=\"form-group input-group\">\r\n          <Container className=\"inputs\">\r\n            <Container className=\"form-group input-group\">\r\n              <Label for=\"email\" className=\"sr-only\" />\r\n              <Input\r\n                onChange={(e) => this.setState({ email: e.target.value })}\r\n                type=\"email\"\r\n                className=\"form-control\"\r\n                id=\"email\"\r\n                placeholder=\"Email Address\"\r\n              />\r\n              <br />\r\n              {this.state.emailErr ? (\r\n                <UncontrolledAlert color=\"danger\">\r\n                  {Object.keys(this.state.emailErr).map((key) => {\r\n                    return <div>{this.state.emailErr[key]}</div>;\r\n                  })}\r\n                </UncontrolledAlert>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </Container>\r\n\r\n            <Container className=\"form-group input-group\">\r\n              <Label for=\"password\" className=\"sr-only\" />\r\n              <Input\r\n                onChange={(e) => this.setState({ password: e.target.value })}\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"password\"\r\n                placeholder=\"Choose a password\"\r\n              />\r\n              {this.state.passwordErr ? (\r\n                <UncontrolledAlert color=\"danger\">\r\n                  {Object.keys(this.state.passwordErr).map((key) => {\r\n                    return <div>{this.state.passwordErr[key]}</div>;\r\n                  })}\r\n                </UncontrolledAlert>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </Container>\r\n\r\n            <Container className=\"form-group input-group\">\r\n              <Label for=\"password2\" className=\"sr-only\" />\r\n              <Input\r\n                onChange={(e) => this.setState({ password2: e.target.value })}\r\n                type=\"password\"\r\n                className=\"form-control\"\r\n                id=\"password2\"\r\n                placeholder=\"Confirm password\"\r\n              />\r\n            </Container>\r\n          </Container>\r\n\r\n          <Container className=\"footerLoginModal text-center\">\r\n            <Button\r\n              type=\"submit\"\r\n              onClick={this.submitRegister}\r\n              className=\"signUpBtn\"\r\n            >\r\n              Sign Up\r\n            </Button>\r\n            <p>{this.state.responseMessage}</p>\r\n          </Container>\r\n        </Form>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n// const Register = (props) => {\r\n//   const [email, setEmail] = useState(\"\");\r\n//   const [password, setPassword] = useState(\"\");\r\n//   const [password2, setPassword2] = useState(\"\");\r\n//   const [emailErr, setEmailErr] = useState(\"\");\r\n//   const [passwordErr, setPasswordErr] = useState(\"\");\r\n//   const [responseMessage, setResponseMessage] = useState(\"\");\r\n//   // const [isValid, setIsValid] = useState(\"\");\r\n\r\n// const submitRegister = (event) => {\r\n//   event.preventDefault();\r\n//   const isValid = formValidate();\r\n//   console.log(isValid);\r\n//   if (isValid) {\r\n//     if (password === password2) {\r\n//       fetch(`${APIURL}/user/register`, {\r\n//         //!needs to be updated to heroku for \"production\"\r\n//         method: \"POST\",\r\n//         headers: { \"Content-Type\": \"application/json\" },\r\n//         body: JSON.stringify({ email, password }),\r\n//       })\r\n//         .then((res) => {\r\n//           if (res.ok) {\r\n//             return res.json();\r\n//           } else {\r\n//             if (res.status === 409) {\r\n//               setResponseMessage(\"Account Already Exists\");\r\n//               throw new Error(\"Account Already Exist\");\r\n//             } else {\r\n//               setResponseMessage(\"Something went wrong\");\r\n//               throw new Error(\"Something went wrong\");\r\n//             }\r\n//           }\r\n//         })\r\n//         .then((data) => {\r\n//           props.updateToken(data.token);\r\n//           console.log(data.message);\r\n//           setResponseMessage(data.message);\r\n//         })\r\n//         .catch((err) => {\r\n//           alert(err);\r\n//         });\r\n//     } else {\r\n//       alert(\"Password must match: Please reenter credentials\");\r\n//     }\r\n//   } else {\r\n//     return;\r\n//   }\r\n// };\r\n\r\n// const formValidate = (event) => {\r\n//   const passwordErr = {};\r\n//   const emailErr = {};\r\n//   let isValid = true;\r\n\r\n//   // checks password length and returns error if <5\r\n//   if (password.trim().length < 5) {\r\n//     passwordErr.TooShort = \"Password must contain 5 or more characters.\";\r\n//     isValid = false;\r\n//   }\r\n\r\n//   // check email is formatted\r\n//   if (!email.includes(\"@\") || !email.includes(\".\")) {\r\n//     emailErr.invalidFormat =\r\n//       \"Invalid email. Email must be formatted as test@test.com\";\r\n//     isValid = false;\r\n//   }\r\n\r\n//   setPasswordErr(passwordErr);\r\n//   setEmailErr(emailErr);\r\n//   return isValid;\r\n// };\r\n\r\n//   return (\r\n//     <Container>\r\n//       <Form onSubmit={submitRegister} className=\"form-group input-group\">\r\n//         <Container className=\"inputs\">\r\n//           <Container className=\"form-group input-group\">\r\n//             <Label for=\"email\" className=\"sr-only\" />\r\n//             <Input\r\n//               onChange={(e) => setEmail(e.target.value)}\r\n//               type=\"email\"\r\n//               className=\"form-control\"\r\n//               id=\"email\"\r\n//               placeholder=\"Email Address\"\r\n//             />\r\n//             <br />\r\n//             {emailErr ? (\r\n//               <UncontrolledAlert color=\"danger\">\r\n//                 {Object.keys(emailErr).map((key) => {\r\n//                   return <div>{emailErr[key]}</div>;\r\n//                 })}\r\n//               </UncontrolledAlert>\r\n//             ) : (\r\n//               <></>\r\n//             )}\r\n//           </Container>\r\n\r\n//           <Container className=\"form-group input-group\">\r\n//             <Label for=\"password\" className=\"sr-only\" />\r\n//             <Input\r\n//               onChange={(e) => setPassword(e.target.value)}\r\n//               type=\"password\"\r\n//               className=\"form-control\"\r\n//               id=\"password\"\r\n//               placeholder=\"Choose a password\"\r\n//             />\r\n//             {passwordErr ? (\r\n//               <UncontrolledAlert color=\"danger\">\r\n//                 {Object.keys(passwordErr).map((key) => {\r\n//                   return <div>{passwordErr[key]}</div>;\r\n//                 })}\r\n//               </UncontrolledAlert>\r\n//             ) : (\r\n//               <></>\r\n//             )}\r\n//           </Container>\r\n\r\n//           <Container className=\"form-group input-group\">\r\n//             <Label for=\"password2\" className=\"sr-only\" />\r\n//             <Input\r\n//               onChange={(e) => setPassword2(e.target.value)}\r\n//               type=\"password\"\r\n//               className=\"form-control\"\r\n//               id=\"password2\"\r\n//               placeholder=\"Confirm password\"\r\n//             />\r\n//           </Container>\r\n//         </Container>\r\n\r\n//         <Container className=\"footerLoginModal text-center\">\r\n//           <Button type=\"submit\" onClick={submitRegister} className=\"signUpBtn\">\r\n//             Sign Up\r\n//           </Button>\r\n//           <p>{responseMessage}</p>\r\n//         </Container>\r\n//       </Form>\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default Register;\r\n",["97","98"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\userLists\\ListModals.jsx",["99","100"],"import React, { useEffect, useState } from \"react\";\r\nimport CreateListModal from \"./CreateListModal\";\r\nimport DisplayListModal from \"./DisplayListModal\";\r\nimport APIURL from \"../../helpers/environment\";\r\n\r\nexport default class ListModals extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.settingState = this.settingState.bind(this);\r\n\r\n    this.state = {\r\n      lists: [],\r\n      err: \"\",\r\n      deleteResponse: \"\",\r\n      updateListRes: \"\",\r\n      listResponse: \"\",\r\n    };\r\n  }\r\n\r\n  settingState(name, value) {\r\n    this.setState({ [name]: value });\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(`${APIURL}/list/allLists`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: this.props.token,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((listData) => {\r\n        this.setState({ lists: listData });\r\n      })\r\n      .catch((err) => {\r\n        this.setState({ err: this.state.err });\r\n      });\r\n    this.setState({ updateListRes: \"\" });\r\n    this.setState({ deleteResponse: \"\" });\r\n    this.setState({ listResponse: \"\" });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sidebar\">\r\n        <div className=\"sidebar-list-styling\">\r\n          <CreateListModal\r\n            token={this.props.token}\r\n            setListResponse={this.settingState}\r\n          />\r\n          <h4 style={{ color: \"black\", marginTop: \"10px\" }}>My TrailLists</h4>\r\n          <hr />\r\n          {this.state.lists.length > 0 ? (\r\n            this.state.lists.map((list, index) => {\r\n              return (\r\n                <div key={index}>\r\n                  <DisplayListModal\r\n                    list={list}\r\n                    token={this.props.token}\r\n                    // setDeleteResponse={setDeleteResponse}\r\n                    settingState={this.settingState}\r\n                    deleteResponse={this.state.deleteResponse}\r\n                    // setUpdateListRes={setUpdateListRes}\r\n                    updateListRes={this.state.updateListRes}\r\n                  />\r\n                </div>\r\n              );\r\n            })\r\n          ) : this.state.err ? (\r\n            <p>{this.state.err}</p>\r\n          ) : (\r\n            <p>Create some trail lists!</p>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const ListModals = (props) => {\r\n//   const [lists, setLists] = useState([]);\r\n//   const [err, setErr] = useState(\"\");\r\n//   const [deleteResponse, setDeleteResponse] = useState(\"\");\r\n//   const [updateListRes, setUpdateListRes] = useState(\"\");\r\n//   const [listResponse, setListResponse] = useState(\"\");\r\n\r\n//   useEffect(() => {\r\n//     fetch(`${APIURL}/list/allLists`, {\r\n//       method: \"GET\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         Authorization: props.token,\r\n//       },\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((listData) => {\r\n//         setLists(listData);\r\n//       })\r\n//       .catch((err) => {\r\n//         setErr(err);\r\n//       });\r\n//     setUpdateListRes(\"\");\r\n//     setDeleteResponse(\"\");\r\n//     setListResponse(\"\");\r\n//   }, [deleteResponse, updateListRes, listResponse]);\r\n\r\n//   return (\r\n//     <div className=\"sidebar\">\r\n//       <div className=\"sidebar-list-styling\">\r\n//         <CreateListModal\r\n//           token={props.token}\r\n//           setListResponse={setListResponse}\r\n//         />\r\n//         <h4 style={{ color: \"black\", marginTop: \"10px\" }}>My TrailLists</h4>\r\n//         <hr />\r\n//         {lists.length > 0 ? (\r\n//           lists.map((list, index) => {\r\n//             return (\r\n//               <div key={index}>\r\n//                 <DisplayListModal\r\n//                   list={list}\r\n//                   token={props.token}\r\n//                   setDeleteResponse={setDeleteResponse}\r\n//                   deleteResponse={deleteResponse}\r\n//                   setUpdateListRes={setUpdateListRes}\r\n//                   updateListRes={updateListRes}\r\n//                 />\r\n//               </div>\r\n//             );\r\n//           })\r\n//         ) : err ? (\r\n//           <p>{err}</p>\r\n//         ) : (\r\n//           <p>Create some trail lists!</p>\r\n//         )}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default ListModals;\r\n",["101","102"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\userLists\\DisplayListModal.jsx",[],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\LoginModal.jsx",["103","104"],"import React, { useState } from \"react\";\r\nimport Login from \"./Login\";\r\nimport Register from \"./Register\";\r\nimport APIURL from \"../helpers/environment\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Form,\r\n} from \"reactstrap\";\r\n\r\nexport default class LoginModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    // this.setToggle2 = this.setToggle2(this);\r\n\r\n    this.state = {\r\n      modal: false,\r\n      toggle2: true,\r\n      className: this.props.className,\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({ modal: !this.state.modal });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form inline onSubmit={(e) => e.preventDefault()}>\r\n          <Button onClick={this.toggle}>Login</Button>\r\n        </Form>\r\n        <Modal\r\n          isOpen={this.state.modal}\r\n          toggle={this.toggle}\r\n          className={this.state.className}\r\n        >\r\n          <ModalHeader toggle={this.toggle}>\r\n            {this.state.toggle2 ? \"Login\" : \"Sign Up\"}\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            {this.state.toggle2 ? (\r\n              <Login updateToken={this.props.updateToken} />\r\n            ) : (\r\n              <Register updateToken={this.props.updateToken} />\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <p>\r\n              {this.state.toggle2\r\n                ? \"Don't have an account?\"\r\n                : \"Already have an account?\"}{\" \"}\r\n              <Button\r\n                className=\"modalFooterLink\"\r\n                data-toggle=\"modal\"\r\n                data-dismiss=\"modal\"\r\n                onClick={(e) => this.setState({ toggle2: !this.state.toggle2 })}\r\n              >\r\n                {this.state.toggle2 ? \"Sign Up\" : \"Login\"}{\" \"}\r\n              </Button>\r\n            </p>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const LoginModal = (props) => {\r\n// const { className } = props;\r\n// const [modal, setModal] = useState(false);\r\n\r\n// const [toggle2, setToggle2] = useState(true);\r\n\r\n// const toggle = () => setModal(!modal);\r\n\r\n// return (\r\n//   <div>\r\n//     <Form inline onSubmit={(e) => e.preventDefault()}>\r\n//       <Button onClick={toggle}>Login</Button>\r\n//     </Form>\r\n//     <Modal isOpen={modal} toggle={toggle} className={className}>\r\n//       <ModalHeader toggle={toggle}>\r\n//         {toggle2 ? \"Login\" : \"Sign Up\"}\r\n//       </ModalHeader>\r\n//       <ModalBody>\r\n//         {toggle2 ? (\r\n//           <Login updateToken={props.updateToken} />\r\n//         ) : (\r\n//           <Register updateToken={props.updateToken} />\r\n//         )}\r\n//       </ModalBody>\r\n//       <ModalFooter>\r\n//         <p>\r\n//           {toggle2 ? \"Don't have an account?\" : \"Already have an account?\"}{\" \"}\r\n//           <Button\r\n//             className=\"modalFooterLink\"\r\n//             data-toggle=\"modal\"\r\n//             data-dismiss=\"modal\"\r\n//             onClick={(e) => setToggle2(!toggle2)}\r\n//           >\r\n//             {toggle2 ? \"Sign Up\" : \"Login\"}{\" \"}\r\n//           </Button>\r\n//         </p>\r\n//       </ModalFooter>\r\n//     </Modal>\r\n//   </div>\r\n// );\r\n// };\r\n\r\n// export default LoginModal;\r\n","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\Login.jsx",["105"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\App.jsx",["106","107"],"C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\TrailCard.jsx",["108"],"import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardImg,\r\n  CardBody,\r\n  CardTitle,\r\n  CardSubtitle,\r\n  CardText,\r\n} from \"reactstrap\";\r\nimport TrailAdderModal from \"./TrailAdderModal\";\r\n// import assets from \"../assets\";\r\n\r\nexport default class TrailCard extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"bookCardContainer\">\r\n        <Card className=\"bookCard\">\r\n          <CardImg\r\n            top\r\n            width=\"100%\"\r\n            src={\r\n              this.props.trail.imgMedium === undefined /// Here is a line of ternary that states if the fetched image links is strictly equal to undefined then the the nocover png image in assets will be displayed instead.\r\n                ? \"../assets/nocover.png\"\r\n                : this.props.trail.imgMedium\r\n            }\r\n            alt=\"Card image cap\"\r\n            style={{\r\n              width: \"10em\",\r\n              height: \"15em\",\r\n              margin: \"auto\",\r\n              paddingTop: \"10px\",\r\n            }}\r\n          />\r\n          <CardBody className=\"bookCardBody\">\r\n            <CardTitle className=\"bookCardBodyTitle\" tag=\"h5\">\r\n              {this.props.trail.name}\r\n            </CardTitle>\r\n            <CardSubtitle></CardSubtitle>\r\n            <CardText>{`Summary: ${this.props.trail.summary}`}</CardText>\r\n            <CardText>{`Location: ${this.props.trail.location}`}</CardText>\r\n            <CardText>{`Difficulty: ${this.props.trail.difficulty}`}</CardText>\r\n            <CardText>{`Length in Miles: ${this.props.trail.length}`}</CardText>\r\n            <CardText>{`Star Rating: ${this.props.trail.stars}`}</CardText>\r\n          </CardBody>\r\n          <TrailAdderModal token={this.props.token} trail={this.props.trail} />\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const TrailCard = (props) => {\r\n//   return (\r\n//     <div className=\"bookCardContainer\">\r\n//       <Card className=\"bookCard\">\r\n//         <CardImg\r\n//           top\r\n//           width=\"100%\"\r\n//           src={\r\n//             props.trail.imgMedium === undefined /// Here is a line of ternary that states if the fetched image links is strictly equal to undefined then the the nocover png image in assets will be displayed instead.\r\n//               ? \"../assets/nocover.png\"\r\n//               : props.trail.imgMedium\r\n//           }\r\n//           alt=\"Card image cap\"\r\n//           style={{\r\n//             width: \"10em\",\r\n//             height: \"15em\",\r\n//             margin: \"auto\",\r\n//             paddingTop: \"10px\",\r\n//           }}\r\n//         />\r\n//         <CardBody className=\"bookCardBody\">\r\n//           <CardTitle className=\"bookCardBodyTitle\" tag=\"h5\">\r\n//             {props.trail.name}\r\n//           </CardTitle>\r\n//           <CardSubtitle></CardSubtitle>\r\n//           <CardText>{`Summary: ${props.trail.summary}`}</CardText>\r\n//           <CardText>{`Location: ${props.trail.location}`}</CardText>\r\n//           <CardText>{`Difficulty: ${props.trail.difficulty}`}</CardText>\r\n//           <CardText>{`Length in Miles: ${props.trail.length}`}</CardText>\r\n//           <CardText>{`Star Rating: ${props.trail.stars}`}</CardText>\r\n//         </CardBody>\r\n//         <TrailAdderModal token={props.token} trail={props.trail} />\r\n//       </Card>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TrailCard;\r\n","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\components\\TrailAdderModal.jsx",["109","110","111"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from \"../helpers/environment\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  Label,\r\n  Dropdown,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Form,\r\n} from \"reactstrap\";\r\n\r\nexport default class TrailAdderModal extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.toggle = this.toggle.bind(this);\r\n    this.toggle2 = this.toggle2.bind(this);\r\n    this.trailAddFetch = this.trailAddFetch.bind(this);\r\n\r\n    this.state = {\r\n      trailAddRes: \"\",\r\n      err: \"\",\r\n      lists: \"\",\r\n      dropdownOpen: false,\r\n      modal: false,\r\n      trailToAdd: {},\r\n    };\r\n  }\r\n\r\n  toggle() {\r\n    this.setState({ modal: !this.state.modal });\r\n  }\r\n\r\n  toggle2() {\r\n    this.setState({ dropdownOpen: !this.state.dropdownOpen });\r\n  }\r\n\r\n  trailAddFetch(listTitle) {\r\n    console.log(listTitle);\r\n    fetch(`${APIURL}/trail/addTrail`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: this.props.token,\r\n      },\r\n      body: JSON.stringify({\r\n        trail: {\r\n          listTitle: listTitle,\r\n          mtbID: this.props.trail.id,\r\n          name: this.props.trail.name,\r\n          type: this.props.trail.type,\r\n          summary: this.props.trail.summary,\r\n          difficulty: this.props.trail.difficulty,\r\n          stars: this.props.trail.stars,\r\n          starVotes: this.props.trail.starVotes,\r\n          location: this.props.trail.location,\r\n          url: this.props.trail.url,\r\n          imgSqSmall: this.props.trail.imgSqSmall,\r\n          imgSmall: this.props.trail.imgSmall,\r\n          imgSmallMed: this.props.trail.imgSmallMed,\r\n          imgMedium: this.props.trail.imgMedium,\r\n          length: this.props.trail.length,\r\n          ascent: this.props.trail.ascent,\r\n          decent: this.props.trail.decent,\r\n          high: this.props.trail.high,\r\n          low: this.props.trail.low,\r\n          longitude: this.props.trail.longitude,\r\n          latitude: this.props.trail.latitude,\r\n          conditionStatus: this.props.trail.conditionStatus,\r\n          conditionDetails: this.props.trail.conditionDetails,\r\n          conditionDate: this.props.trail.conditionDate,\r\n          ridden: false,\r\n        },\r\n      }),\r\n    })\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        this.setState({ trailAddRes: data.message });\r\n        console.log(data.message);\r\n      })\r\n      .catch((err) => {\r\n        this.setState({ err: this.state.err });\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\"componentDidMount\");\r\n    fetch(`${APIURL}/list/allLists`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: this.props.token,\r\n      },\r\n    })\r\n      .then((res) => res.json())\r\n      .then((listData) => {\r\n        this.setState({ lists: listData });\r\n        console.log(listData);\r\n      })\r\n      .catch((err) => {\r\n        this.setState({ err: this.state.err.message });\r\n        console.log(err);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Form inline onSubmit={(e) => e.preventDefault()}>\r\n          <Button onClick={this.toggle} style={{ margin: \"0 auto\" }}>\r\n            Add to TrailList\r\n          </Button>\r\n        </Form>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle} className=\"yoyo\">\r\n          {this.props.token ? (\r\n            <>\r\n              <ModalHeader toggle={this.toggle}>\r\n                Would you like to add this Trail to your TrailList?{\" \"}\r\n              </ModalHeader>\r\n              <ModalBody>\r\n                <Dropdown\r\n                  isOpen={this.state.dropdownOpen}\r\n                  toggle={this.toggle2}\r\n                >\r\n                  <DropdownToggle caret>Trail Lists</DropdownToggle>\r\n                  <DropdownMenu>\r\n                    {this.state.lists.length > 0 ? (\r\n                      this.state.lists.map((list) => {\r\n                        ///?\r\n                        return (\r\n                          <DropdownItem\r\n                            onClick={(e) =>\r\n                              this.trailAddFetch(e.target.innerText)\r\n                            }\r\n                          >\r\n                            {list.title}\r\n                          </DropdownItem>\r\n                        );\r\n                      })\r\n                    ) : this.state.err ? (\r\n                      <DropdownItem>{this.state.err.message}</DropdownItem>\r\n                    ) : (\r\n                      <></>\r\n                    )}\r\n                  </DropdownMenu>\r\n                </Dropdown>\r\n              </ModalBody>\r\n            </>\r\n          ) : (\r\n            <ModalHeader toggle={this.toggle}>\r\n              Must have an account to add to TrailLists.\r\n            </ModalHeader>\r\n          )}\r\n          <ModalFooter>\r\n            <Button color=\"secondary\" onClick={this.toggle}>\r\n              {/* <Button color=\"secondary\" onClick={this.trailAddFetch}> */}\r\n              Okay\r\n            </Button>\r\n          </ModalFooter>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// const TrailAdderModal = (props) => {\r\n//   const [trailAddRes, setTrailAddRes] = useState(\"\");\r\n//   const [err, setErr] = useState(\"\");\r\n//   const [lists, setLists] = useState(\"\");\r\n//   const [dropdownOpen, setDropdownOpen] = useState(false);\r\n//   const [modal, setModal] = useState(false);\r\n\r\n//   const toggle = () => setModal(!modal);\r\n\r\n//   const toggle2 = () => setDropdownOpen((prevState) => !prevState);\r\n\r\n//   const bookAddFetch = (listTitle) => {\r\n//     console.log(listTitle);\r\n//     fetch(`${APIURL}/trail/addTrail`, {\r\n//       method: \"POST\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         Authorization: props.token,\r\n//       },\r\n//       body: JSON.stringify({\r\n//         trail: {\r\n//           listTitle: listTitle,\r\n//           mtbID: props.trail.id,\r\n//           name: props.trail.name,\r\n//           type: props.trail.type,\r\n//           summary: props.trail.summary,\r\n//           difficulty: props.trail.difficulty,\r\n//           stars: props.trail.stars,\r\n//           starVotes: props.trail.starVotes,\r\n//           location: props.trail.location,\r\n//           url: props.trail.url,\r\n//           imgSqSmall: props.trail.imgSqSmall,\r\n//           imgSmall: props.trail.imgSmall,\r\n//           imgSmallMed: props.trail.imgSmallMed,\r\n//           imgMedium: props.trail.imgMedium,\r\n//           length: props.trail.length,\r\n//           ascent: props.trail.ascent,\r\n//           decent: props.trail.decent,\r\n//           high: props.trail.high,\r\n//           low: props.trail.low,\r\n//           longitude: props.trail.longitude,\r\n//           latitude: props.trail.latitude,\r\n//           conditionStatus: props.trail.conditionStatus,\r\n//           conditionDetails: props.trail.conditionDetails,\r\n//           conditionDate: props.trail.conditionDate,\r\n//           ridden: false,\r\n//         },\r\n//       }),\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((data) => {\r\n//         setTrailAddRes(data.message);\r\n//         console.log(data.message);\r\n//       })\r\n//       .catch((err) => {\r\n//         setErr(err);\r\n//         console.log(err);\r\n//       });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetch(`${APIURL}/list/allLists`, {\r\n//       method: \"GET\",\r\n//       headers: {\r\n//         \"Content-Type\": \"application/json\",\r\n//         Authorization: props.token,\r\n//       },\r\n//     })\r\n//       .then((res) => res.json())\r\n//       .then((listData) => {\r\n//         setLists(listData);\r\n//       })\r\n//       .catch((err) => {\r\n//         setErr(err.message);\r\n//       });\r\n//   }, [modal]);\r\n\r\n//   return (\r\n//     <div>\r\n//       <Form inline onSubmit={(e) => e.preventDefault()}>\r\n//         <Button onClick={toggle} style={{ margin: \"0 auto\" }}>\r\n//           Add to TrailList\r\n//         </Button>\r\n//       </Form>\r\n//       <Modal isOpen={modal} toggle={toggle} className=\"yoyo\">\r\n//         {props.token ? (\r\n//           <>\r\n//             <ModalHeader toggle={toggle}>\r\n//               Would you like to add this Trail to your TrailList?{\" \"}\r\n//             </ModalHeader>\r\n//             <ModalBody>\r\n//               <Dropdown isOpen={dropdownOpen} toggle={toggle2}>\r\n//                 <DropdownToggle caret>Trail Lists</DropdownToggle>\r\n//                 <DropdownMenu>\r\n//                   {lists.length > 0 ? (\r\n//                     lists.map((list) => {\r\n//                       return (\r\n//                         <DropdownItem\r\n//                           onClick={(e) => bookAddFetch(e.target.innerText)}\r\n//                         >\r\n//                           {list.title}\r\n//                         </DropdownItem>\r\n//                       );\r\n//                     })\r\n//                   ) : err ? (\r\n//                     <DropdownItem>{err.message}</DropdownItem>\r\n//                   ) : (\r\n//                     <></>\r\n//                   )}\r\n//                 </DropdownMenu>\r\n//               </Dropdown>\r\n//             </ModalBody>\r\n//           </>\r\n//         ) : (\r\n//           <ModalHeader toggle={toggle}>\r\n//             Must have an account to add to TrailLists.\r\n//           </ModalHeader>\r\n//         )}\r\n//         <ModalFooter>\r\n//           <Button color=\"secondary\" onClick={toggle}>\r\n//             Okay\r\n//           </Button>\r\n//         </ModalFooter>\r\n//       </Modal>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TrailAdderModal;\r\n","C:\\Users\\reyno\\Desktop\\wd64-Sept2020\\projects\\TrailFlow-Main\\client\\src\\helpers\\environment.js",["112"],"let APIURL = \"\";\r\n\r\nswitch (window.location.hostname) {\r\n  //this is the local host name of your API\r\n  case \"localhost\" || \"127.0.0.1\":\r\n    // this is the local host name of your API\r\n    APIURL = \"http://localhost:3030\";\r\n    break;\r\n  // this is the deployed react application\r\n  case \"trailflow.herokuapp.com\": // client url\r\n    // this is the full url of your deployed API\r\n    APIURL = \"https://tjr-trailflow.herokuapp.com\"; //server url\r\n}\r\n\r\nexport default APIURL;\r\n",{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"113","replacedBy":"117"},{"ruleId":"115","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"123","line":1,"column":27,"nodeType":"121","messageId":"122","endLine":1,"endColumn":36},{"ruleId":"119","severity":1,"message":"124","line":2,"column":10,"nodeType":"121","messageId":"122","endLine":2,"endColumn":16},{"ruleId":"125","severity":1,"message":"126","line":10,"column":3,"nodeType":"127","messageId":"128","endLine":12,"endColumn":4},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"129","line":11,"column":3,"nodeType":"121","messageId":"122","endLine":11,"endColumn":8},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"126","line":5,"column":3,"nodeType":"127","messageId":"128","endLine":7,"endColumn":4},{"ruleId":"113","replacedBy":"130"},{"ruleId":"115","replacedBy":"131"},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"132","line":30,"column":11,"nodeType":"121","messageId":"122","endLine":30,"endColumn":22},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"113","replacedBy":"133"},{"ruleId":"115","replacedBy":"134"},{"ruleId":"119","severity":1,"message":"123","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":26},{"ruleId":"119","severity":1,"message":"120","line":1,"column":28,"nodeType":"121","messageId":"122","endLine":1,"endColumn":36},{"ruleId":"113","replacedBy":"135"},{"ruleId":"115","replacedBy":"136"},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"137","line":4,"column":8,"nodeType":"121","messageId":"122","endLine":4,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"120","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":25},{"ruleId":"119","severity":1,"message":"123","line":1,"column":27,"nodeType":"121","messageId":"122","endLine":1,"endColumn":36},{"ruleId":"125","severity":1,"message":"126","line":14,"column":3,"nodeType":"127","messageId":"128","endLine":16,"endColumn":4},{"ruleId":"119","severity":1,"message":"123","line":1,"column":17,"nodeType":"121","messageId":"122","endLine":1,"endColumn":26},{"ruleId":"119","severity":1,"message":"120","line":1,"column":28,"nodeType":"121","messageId":"122","endLine":1,"endColumn":36},{"ruleId":"119","severity":1,"message":"138","line":9,"column":3,"nodeType":"121","messageId":"122","endLine":9,"endColumn":8},{"ruleId":"139","severity":1,"message":"140","line":3,"column":1,"nodeType":"141","messageId":"142","endLine":13,"endColumn":2},"no-native-reassign",["143"],"no-negated-in-lhs",["144"],["143"],["144"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'Button' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'Alert' is defined but never used.",["143"],["144"],"'searchInput' is assigned a value but never used.",["143"],["144"],["143"],["144"],"'APIURL' is defined but never used.","'Label' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation"]